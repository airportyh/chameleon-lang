struct LList {
    char: int
    next: LList
}

struct BTreeMap {
    key: long
    value: LList
    size: int
    left: BTreeMap
    right: BTreeMap
}

fun main(): int [
    tree:BTreeMap = null
    while true [
        input = prompt(llist('>' llist(' ' null)))
        if input != null [
            if input.char == 'q' [
                break
            ]
            if input.char == 's' [
                tree = user_insert(tree)
            ]
            if input.char == 'p' [
                print_tree(tree 0)
            ]
            if input.char == 'd' [
                tree = user_delete(tree)
            ]
            if input.char == 'g' [
                user_get_key(tree)
            ]
            if input.char == 'l' [
                tree = btmap_single_left_rotation(tree)
            ]
        ]
    ]
    return 0
]

fun user_insert(tree:BTreeMap): BTreeMap [
    print_string(llist('K' llist('e' llist('y' llist(':' llist(' ' null))))))
    key = read_long()
    print_string(llist('V' llist('a' llist('l' llist(':' llist(' ' null))))))
    value = user_input(null)
    return btmap_set(key value tree)
]

fun user_delete(tree:BTreeMap): BTreeMap [
    print_string(llist('K' llist('e' llist('y' llist(':' llist(' ' null))))))
    key = read_long()
    return btmap_delete(key tree)
]

fun user_get_key(tree:BTreeMap) [
    print_string(llist('K' llist('e' llist('y' llist(':' llist(' ' null))))))
    key = read_long()
    result = btmap_get(key tree)
    if result != null [
        print_string(result.value)
    ] else [
        print_string(llist('N' llist('o' null)))
    ]
    putchar('\n')
]

fun prompt(message:LList): LList [
    print_string(message)
    return user_input(null)
]

fun user_input(chars:LList): LList [
    char = getchar()
    if char == 10 [
        return chars
    ]
    return llist(char user_input(chars))
]

fun print_tree(tree:BTreeMap level:int) [
    if tree != null [
        print_indent(level)
        print_long(tree.key)
        putchar(58)
        print_string(tree.value)
        putchar(10)
        print_tree(tree.left level + 1)
        print_tree(tree.right level + 1)
    ]
]

fun print_long(num:long) [
    if num > 0 [
        digit = num % 10
        print_long(num / 10)
        putchar(48 + digit)
    ]
]

fun read_long(): long [
    num = 0
    while true [
        digit = getchar()
        if digit == 10 [
            break
        ]
        num = num * 10
        num = num + (digit - 48)
    ]
    return num
]

fun print_indent(amount:int) [
    while amount > 0 [
        putchar(' ')
        putchar(' ')
        putchar(' ')
        putchar(' ')
        amount = amount - 1
    ]
]

fun print_string(string:LList) [
    if string != null [
        putchar(string.char)
        print_string(string.next)
    ]
]

# Binary Tree Map Operations

fun btmap_set(key:long value:LList btree:BTreeMap): BTreeMap [
    if btree == null [
        return btmap(key value null null)
    ]
    if key == btree.key [
        return btmap_create_balanced(
            key
            value
            btree.left
            btree.right
        )
    ] else if key > btree.key [
        new_right = btmap_set(key value btree.right)
        return btmap_create_balanced(
            btree.key 
            btree.value 
            btree.left 
            new_right
        )
    ]
    new_left = btmap_set(key value btree.left)
    return btmap(
        btree.key btree.value new_left btree.right)
]

fun btmap_get(key:long tree:BTreeMap): BTreeMap [
    if tree == null [
        return null
    ]
    if key == tree.key [
        return tree
    ] else if key > tree.key [
        return btmap_get(key tree.right)
    ]
    return btmap_get(key tree.left)
]

fun btmap_delete(key:long tree:BTreeMap): BTreeMap [
    if tree == null [
        return null
    ]
    if key == tree.key [
        right_min = btmap_min(tree.right)
        return btmap_create_balanced(
            right_min.key
            right_min.value
            tree.left
            btmap_delete_min(tree.right)
        )
    ] else if key > tree.key [
        return btmap_create_balanced(
            tree.key
            tree.value
            tree.left
            btmap_delete(key tree.right)
        )
    ]
    return btmap_create_balanced(
        tree.key
        tree.value
        btmap_delete(key tree.left)
        tree.right
    )
]

fun btmap_min(tree:BTreeMap): BTreeMap [
    if tree.left != null [
        return btmap_min(tree.left)
    ]
    return tree
]

fun btmap_delete_min(tree:BTreeMap): BTreeMap [
    if tree.left != null [
        return btmap(
            tree.key
            tree.value
            btmap_delete_min(tree.left)
            tree.right
        )
    ]
    return tree.right
]

fun btmap(
    key:long
    value:LList
    left:BTreeMap
    right:BTreeMap
): BTreeMap [
    size = 1
    if left != null [
        size = size + left.size
    ]
    if right != null [
        size = size + right.size
    ]
    return alloc BTreeMap {
        key = key
        value = value
        size = size
        left = left
        right = right
    }
]

# See http://groups.csail.mit.edu/mac/users/adams/BB/
# section 6: Balance maintenance algorithms
fun btmap_single_left_rotation(a:BTreeMap): BTreeMap [
    x = a.left
    b = a.right
    y = a.right.left
    z = a.right.right
    a1 = btmap(a.key a.value x y)
    b1 = btmap(b.key b.value a1 z)
    return b1
]

fun btmap_single_right_rotation(b:BTreeMap): BTreeMap [
    a = b.left
    x = a.left
    y = a.right
    z = b.right
    b1 = btmap(b.key b.value y z)
    a1 = btmap(a.key a.value x b1)
    return a1
]

fun btmap_double_left_rotation(a:BTreeMap): BTreeMap [
    x = a.left
    c = a.right
    b = c.left
    z = c.right
    y1 = b.left
    y2 = b.right
    a1 = btmap(a.key a.value x y1)
    c1 = btmap(c.key c.value y2 z)
    b1 = btmap(b.key b.value a1 c1)
    return b1
]

fun btmap_double_right_rotation(c:BTreeMap): BTreeMap [
    z = c.right
    a = c.left
    x = a.left
    b = a.right
    y1 = b.left
    y2 = b.right
    a1 = btmap(a.key a.value x y1)
    c1 = btmap(c.key c.value y2 z)
    b1 = btmap(b.key b.value a1 c1)
    return b1
]

fun btmap_create_balanced(key:long value:LList left:BTreeMap right:BTreeMap): BTreeMap [
    weight = 3.745
    p = btmap(key value left right)
    ln = btmap_size(left)
    rn = btmap_size(right)
    if ln + rn < 2 [
        return p
    ] else if rn > int(weight * double(ln)) [
        # right is too big
        rl = right.left
        rr = right.right
        rln = btmap_size(rl)
        rrn = btmap_size(rr)
        if rln < rrn [
            return btmap_single_left_rotation(p)
        ] else [
            return btmap_double_left_rotation(p)
        ]
    ] else if ln > int(weight * double(rn)) [
        # left is too big
        ll = left.left
        lr = left.right
        lln = btmap_size(ll)
        lrn = btmap_size(lr)
        if lrn < lln [
            return btmap_single_right_rotation(p)
        ] else [
            return btmap_double_right_rotation(p)
        ]
    ] else [
        return p
    ]
]

fun btmap_size(tree:BTreeMap): int [
    if tree == null [
        return 0
    ] else [
        return tree.size
    ]
]

# Linked List Operations

fun llist(char:int next:LList): LList [
    return alloc LList {
        char = char
        next = next
    }
]