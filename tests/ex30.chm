struct LList {
    char: int
    next: LList
}

struct BTreeMap {
    key: long
    value: LList
    left: BTreeMap
    right: BTreeMap
}

fun main(): int [
    tree:BTreeMap = null
    while true [
        input = prompt(llist(62 llist(32 null)))
        if input != null [
            if (input.char) == 113 [
                break
            ]
            if (input.char) == 105 [
                tree = user_insert(tree)
            ]
            if (input.char) == 112 [
                print_tree(tree 0)
            ]
        ]
    ]
    return 0
]

fun user_insert(tree:BTreeMap): BTreeMap [
    print_string(llist(75 llist(101 llist(121 llist(58 null)))))
    key = read_long()
    print_string(llist(86 llist(97 llist(108 llist(58 null)))))
    value = user_input(null)
    return btree_insert(key value tree)
]

fun prompt(message:LList): LList [
    print_string(message)
    return user_input(null)
]

fun user_input(chars:LList): LList [
    char = getchar()
    if char == 10 [
        return chars
    ]
    return llist(char user_input(chars))
]

fun print_tree(tree:BTreeMap level:int) [
    if tree != null [
        print_indent(level)
        print_long(tree.key)
        putchar(58)
        print_string(tree.value)
        putchar(10)
        print_tree(tree.left level + 1)
        print_tree(tree.right level + 1)
    ]
]

fun print_long(num:long) [
    if num > 0 [
        digit = num % 10
        print_long(num / 10)
        putchar(48 + digit)
    ]
]

fun read_long(): long [
    num = 0
    while true [
        digit = getchar()
        if digit == 10 [
            break
        ]
        num = num * 10
        num = num + (digit - 48)
    ]
    return num
]

fun print_indent(amount:int) [
    while amount > 0 [
        putchar(32)
        putchar(32)
        putchar(32)
        putchar(32)
        amount = amount - 1
    ]
]

fun print_string(string:LList) [
    if string != null [
        putchar(string.char)
        print_string(string.next)
    ]
]

fun btree_insert(key:long value:LList btree:BTreeMap): BTreeMap [
    if btree == null [
        return btree(key value null null)
    ]
    if key > btree.key [
        new_right = btree_insert(key value btree.right)
        return btree(btree.key btree.value btree.left new_right)
    ]
    new_left = btree_insert(key value btree.left)
    return btree(btree.key btree.value new_left btree.right)
]

fun btree(key:long value:LList left:BTreeMap right:BTreeMap): BTreeMap [
    return alloc BTreeMap {
        key = key
        value = value
        left = left
        right = right
    }
]

fun llist(char:int next:LList): LList [
    return alloc LList {
        char = char
        next = next
    }
]